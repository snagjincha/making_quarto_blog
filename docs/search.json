[
  {
    "objectID": "posts/HTP.html",
    "href": "posts/HTP.html",
    "title": "How to post",
    "section": "",
    "text": "Jupyter Notebook을 사용하지 않는다면 terminal에 접속하면 본인의 폴더들에 접근하면 된다.\n\n\n\n\n\n\n\n\nJupyter Notebook 사용자 : terminal에 접속한다. (Jupyter Notebook 터미널도 상관없음)\nJupyter Notebook 미사용자 : 이미 terminal에 접속이 되어있겠지?\n\n\n\n\n그냥 무작정 쳤을 때 운좋으면 되고 운이 좋지 않으면 안되는 상황이 벌어진다… 조금은 이해해야할 부분이 있으니 설명해보겠다\n\n위의 명령어들을 posts 폴더에 들어간 상태에서 수행하면 안된다\n3번에서 했던 것 처럼 폴더에 들어갔을 때 docs 폴더, posts 폴더, 등등등이 존재하는 디렉토리에서 명령어를 쳐야한다. 즉, (base) root@b32cb67a980e:~/&lt;레포지토리 이름&gt;# 여기서 쳐야한다는 것이다.\n\n\n\n\ndocs 폴더 안에 있는 .html파일, styles.css 등등이 웹페이지를 이루는 파일들이다.\n즉 docs 폴더 안에 있는 파일들이 변해야 웹페이지가 변한다는 의미이다.\n그럼 어떻게 docs 폴더의 파일들을 바꾸는가?\nposts 폴더에 (docs 안에 있는 posts 폴더 말고) 업로드 하고자 하는 파일을 넣고 quarto render 명령어를 치면 docs 폴더가 새롭게 바뀌는 것을 알 수 있다.\n\n\n\ndocs 폴더가 바뀐 것을 확인했으면 이제 바뀐 정보들을 update 해야한다.\nupdate하는 방법은 git add ., git commit -m ., git push 명령어를 수행하면 된다.\n\n\n\n본인의 github 아이디와 token을 요구하는데 작성하면 된다."
  },
  {
    "objectID": "posts/HTP.html#jupyter-notebook을-사용한다면-본인이-포스팅을-원하는-레포지토리-폴더가-있을-것이다.",
    "href": "posts/HTP.html#jupyter-notebook을-사용한다면-본인이-포스팅을-원하는-레포지토리-폴더가-있을-것이다.",
    "title": "How to post",
    "section": "",
    "text": "Jupyter Notebook을 사용하지 않는다면 terminal에 접속하면 본인의 폴더들에 접근하면 된다."
  },
  {
    "objectID": "posts/HTP.html#본인이-포스팅하길-원하는-자료를-posts에-이동시킨다.-그-이후",
    "href": "posts/HTP.html#본인이-포스팅하길-원하는-자료를-posts에-이동시킨다.-그-이후",
    "title": "How to post",
    "section": "",
    "text": "Jupyter Notebook 사용자 : terminal에 접속한다. (Jupyter Notebook 터미널도 상관없음)\nJupyter Notebook 미사용자 : 이미 terminal에 접속이 되어있겠지?"
  },
  {
    "objectID": "posts/HTP.html#이제-quarto-render-git-add-.-git-commit--m-.-git-push-명령어를-순서대로-치면-된다.-하지만..",
    "href": "posts/HTP.html#이제-quarto-render-git-add-.-git-commit--m-.-git-push-명령어를-순서대로-치면-된다.-하지만..",
    "title": "How to post",
    "section": "",
    "text": "그냥 무작정 쳤을 때 운좋으면 되고 운이 좋지 않으면 안되는 상황이 벌어진다… 조금은 이해해야할 부분이 있으니 설명해보겠다\n\n위의 명령어들을 posts 폴더에 들어간 상태에서 수행하면 안된다\n3번에서 했던 것 처럼 폴더에 들어갔을 때 docs 폴더, posts 폴더, 등등등이 존재하는 디렉토리에서 명령어를 쳐야한다. 즉, (base) root@b32cb67a980e:~/&lt;레포지토리 이름&gt;# 여기서 쳐야한다는 것이다."
  },
  {
    "objectID": "posts/HTP.html#quarto-render",
    "href": "posts/HTP.html#quarto-render",
    "title": "How to post",
    "section": "",
    "text": "docs 폴더 안에 있는 .html파일, styles.css 등등이 웹페이지를 이루는 파일들이다.\n즉 docs 폴더 안에 있는 파일들이 변해야 웹페이지가 변한다는 의미이다.\n그럼 어떻게 docs 폴더의 파일들을 바꾸는가?\nposts 폴더에 (docs 안에 있는 posts 폴더 말고) 업로드 하고자 하는 파일을 넣고 quarto render 명령어를 치면 docs 폴더가 새롭게 바뀌는 것을 알 수 있다."
  },
  {
    "objectID": "posts/HTP.html#docs",
    "href": "posts/HTP.html#docs",
    "title": "How to post",
    "section": "",
    "text": "docs 폴더가 바뀐 것을 확인했으면 이제 바뀐 정보들을 update 해야한다.\nupdate하는 방법은 git add ., git commit -m ., git push 명령어를 수행하면 된다."
  },
  {
    "objectID": "posts/HTP.html#본인-인증",
    "href": "posts/HTP.html#본인-인증",
    "title": "How to post",
    "section": "",
    "text": "본인의 github 아이디와 token을 요구하는데 작성하면 된다."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": ".",
    "section": "",
    "text": "How to post\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2025\n\n\n차상진\n\n\n\n\n\n\n\n\n\n\n\n\nHow to make quarto blog\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2025\n\n\n차상진\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/HTMQB.html",
    "href": "posts/HTMQB.html",
    "title": "How to make quarto blog",
    "section": "",
    "text": "이 포스트에서는 Quarto blog를 만드는 방법이 step by step으로 작성되어 있습니다.\nmac 사용자와 ssh 서버를 가지고 있는 환경을 기준으로 작성되었으니 참고하시길 바랍니다.\n\n\n블로그로 만들고싶은 레포지토리를 생성합니다.\n\n\n\n각자 접속되어있는 ssh 서버에 접속합니다.\n추가적으로 git도 설치해야하는데 mac 사용자는 기본적으로 git이 설치되어 있습니다.\n\n\n\n\n만든 레포지토리를 터미널에서 git clone &lt;복사된 레포지토리 주소&gt;\ncd &lt;레포지토리이름&gt; 해서 레포지토리 폴더로 들어가기\nquarto create -&gt; 엔터 -&gt; blog 선택 후 엔터\n많은 파일들이 생겼을텐데 ls 명령어 쳐봐서 파일들이 잘 생겼는지 확인 (_config.yml, index.qmd 등등…)\n\n\n\n\n\ngit add .\ngit commit -m .\ngit push\n\n위의 명령어를 순서대로 입력하여 변경사항을 update 한다.\n그 후 github 레포지토리를 새로고침해보면 파일들이 업데이트된 걸 확인할 수 있다.\n\n\n\nquarto render\n\n위의 명령어를 입력하면 docs 폴더가 생성된다.\n\n\n\n\n\nvi _quarto.yml를 치면 새로운 창으로 들어가지게 된다.\n들어가서 type 밑줄에다가 output-dir: docs를 입력\nEsc 누르고 shift zz 치면 빠져나와짐 (꼭 동시에 누를 필요는 없음)\n\n\n\n\nQuarto render\n위의 명령어를 실행하자.\ndocs 안에 많은 파일들이 생긴다. (index.html, about.html, styles.css 등등..)\n\n\n\n\ngit add .\ngit commit -m .\ngit push\n\n위의 명령어를 순서대로 입력하여 변경사항을 update 한다.\n그 후 github 레포지토리를 새로고침해보면 파일들이 업데이트된 걸 확인할 수 있다.\n\n\n\n\n레포지토리에서 setting -&gt; pages\nbranch를 main, /docs로 변경 후 save\n\n\n\n\n다음 포스트에서는 어떻게 파일을 블로그에 올리는지 포스팅하겠다."
  },
  {
    "objectID": "posts/HTMQB.html#create-github-repository",
    "href": "posts/HTMQB.html#create-github-repository",
    "title": "How to make quarto blog",
    "section": "",
    "text": "블로그로 만들고싶은 레포지토리를 생성합니다."
  },
  {
    "objectID": "posts/HTMQB.html#터미널에서-ssh-서버-접속",
    "href": "posts/HTMQB.html#터미널에서-ssh-서버-접속",
    "title": "How to make quarto blog",
    "section": "",
    "text": "각자 접속되어있는 ssh 서버에 접속합니다.\n추가적으로 git도 설치해야하는데 mac 사용자는 기본적으로 git이 설치되어 있습니다."
  },
  {
    "objectID": "posts/HTMQB.html#git-clone-repository",
    "href": "posts/HTMQB.html#git-clone-repository",
    "title": "How to make quarto blog",
    "section": "",
    "text": "만든 레포지토리를 터미널에서 git clone &lt;복사된 레포지토리 주소&gt;\ncd &lt;레포지토리이름&gt; 해서 레포지토리 폴더로 들어가기\nquarto create -&gt; 엔터 -&gt; blog 선택 후 엔터\n많은 파일들이 생겼을텐데 ls 명령어 쳐봐서 파일들이 잘 생겼는지 확인 (_config.yml, index.qmd 등등…)"
  },
  {
    "objectID": "posts/HTMQB.html#변경사항-update",
    "href": "posts/HTMQB.html#변경사항-update",
    "title": "How to make quarto blog",
    "section": "",
    "text": "git add .\ngit commit -m .\ngit push\n\n위의 명령어를 순서대로 입력하여 변경사항을 update 한다.\n그 후 github 레포지토리를 새로고침해보면 파일들이 업데이트된 걸 확인할 수 있다."
  },
  {
    "objectID": "posts/HTMQB.html#docs-폴더-생성",
    "href": "posts/HTMQB.html#docs-폴더-생성",
    "title": "How to make quarto blog",
    "section": "",
    "text": "quarto render\n\n위의 명령어를 입력하면 docs 폴더가 생성된다."
  },
  {
    "objectID": "posts/HTMQB.html#docs-설정-변경",
    "href": "posts/HTMQB.html#docs-설정-변경",
    "title": "How to make quarto blog",
    "section": "",
    "text": "vi _quarto.yml를 치면 새로운 창으로 들어가지게 된다.\n들어가서 type 밑줄에다가 output-dir: docs를 입력\nEsc 누르고 shift zz 치면 빠져나와짐 (꼭 동시에 누를 필요는 없음)"
  },
  {
    "objectID": "posts/HTMQB.html#quarto-render",
    "href": "posts/HTMQB.html#quarto-render",
    "title": "How to make quarto blog",
    "section": "",
    "text": "Quarto render\n위의 명령어를 실행하자.\ndocs 안에 많은 파일들이 생긴다. (index.html, about.html, styles.css 등등..)"
  },
  {
    "objectID": "posts/HTMQB.html#변경사항-update-1",
    "href": "posts/HTMQB.html#변경사항-update-1",
    "title": "How to make quarto blog",
    "section": "",
    "text": "git add .\ngit commit -m .\ngit push\n\n위의 명령어를 순서대로 입력하여 변경사항을 update 한다.\n그 후 github 레포지토리를 새로고침해보면 파일들이 업데이트된 걸 확인할 수 있다."
  },
  {
    "objectID": "posts/HTMQB.html#setting",
    "href": "posts/HTMQB.html#setting",
    "title": "How to make quarto blog",
    "section": "",
    "text": "레포지토리에서 setting -&gt; pages\nbranch를 main, /docs로 변경 후 save"
  },
  {
    "objectID": "posts/HTMQB.html#done",
    "href": "posts/HTMQB.html#done",
    "title": "How to make quarto blog",
    "section": "",
    "text": "다음 포스트에서는 어떻게 파일을 블로그에 올리는지 포스팅하겠다."
  }
]